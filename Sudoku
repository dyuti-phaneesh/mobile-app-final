import React, { Component } from 'react';
import { View, Text, StyleSheet, TouchableHighlight, Dimensions } from 'react-native';
import Constants from 'expo-constants';

let deviceHeight = Dimensions.get('window').height;
let deviceWidth = Dimensions.get('window').width;

export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            board: Array(9).fill(null).map(() => Array(9).fill("")),
            playerBoard: [],
        };
    }

    reset = () => {
        this.setState({
            board: Array(9).fill(null).map(() => Array(9).fill("")),
            playerBoard: [],
        });
    }

    handleEasyDisplayPagePress = () => this.setState({
        easyDisplay: 'block',
        mainDisplay: 'none',
        instructionsDisplay: 'none',
    });

    handleMainDisplayPagePress = () => this.setState({
        easyDisplay: 'none',
        mainDisplay: 'block',
        instructionsDisplay: 'none',
    });

    handleInstructionsDisplayPagePress = () => this.setState({
        easyDisplay: 'none',
        mainDisplay: 'none',
        instructionsDisplay: 'block',
    });

    randomBoardRender = () => {
        const newBoard = this.state.board.map(row => 
            row.map(() => Math.floor(Math.random() * 9 + 1))
        );
        this.setState({ board: newBoard }, this.rules);
    }

    rules = () => {
        let newBoard = [...this.state.board];

        // Check rows for duplicates
        for (let i = 0; i < 9; i++) {
            let rowSet = new Set();
            for (let j = 0; j < 9; j++) {
                if (newBoard[i][j] !== "" && rowSet.has(newBoard[i][j])) {
                    newBoard[i][j] = ""; // Empty the cell if duplicate is found
                } else {
                    rowSet.add(newBoard[i][j]);
                }
            }
        }

        // Check columns for duplicates
        for (let i = 0; i < 9; i++) {
            let colSet = new Set();
            for (let j = 0; j < 9; j++) {
                if (newBoard[j][i] !== "" && colSet.has(newBoard[j][i])) {
                    newBoard[j][i] = ""; // Empty the cell if duplicate is found
                } else {
                    colSet.add(newBoard[j][i]);
                }
            }
        }

        // Check 3x3 subgrids for duplicates
        for (let row = 0; row < 9; row += 3) {
            for (let col = 0; col < 9; col += 3) {
                let gridSet = new Set();
                for (let i = 0; i < 3; i++) {
                    for (let j = 0; j < 3; j++) {
                        let value = newBoard[row + i][col + j];
                        if (value !== "" && gridSet.has(value)) {
                            newBoard[row + i][col + j] = ""; // Empty the cell if duplicate is found
                        } else {
                            gridSet.add(value);
                        }
                    }
                }
            }
        }

        this.setState({ board: newBoard });
    };
    
    readyEasyBoard = () => {
        let newBoard = [...this.state.board];
        let k = Math.floor(Math.random() * 30 + 10);
        for (let n = 0; n < k; n++) {
            let row = Math.floor(Math.random() * 9);
            let col = Math.floor(Math.random() * 9);
            newBoard[row][col] = "";
        }
        this.setState({ playerBoard: newBoard });
    }
    
    readyMediumBoard = () => {
        let newBoard = [...this.state.board];
        let k = Math.floor(Math.random() * 20 + 10);
        for (let n = 0; n < k; n++) {
            let row = Math.floor(Math.random() * 9);
            let col = Math.floor(Math.random() * 9);
            newBoard[row][col] = "";
        }
        this.setState({ playerBoard: newBoard });
    }
    
    readyHardBoard = () => {
        let newBoard = [...this.state.board];
        let k = Math.floor(Math.random() * 10 + 10);
        for (let n = 0; n < k; n++) {
            let row = Math.floor(Math.random() * 9);
            let col = Math.floor(Math.random() * 9);
            newBoard[row][col] = "";
        }
        this.setState({ playerBoard: newBoard });
    }

    render() {
        return (
            <View style={styles.container}>
                <View style={styles.contentContainer}>
                    {this.state.board.map((row, rowIndex) => (
                        <View key={rowIndex} style={styles.rowContainer}>
                            {row.map((cell, colIndex) => (
                                <Text key={colIndex} style={styles.cellText}>{cell}</Text>
                            ))}
                        </View>
                    ))}
                </View>
                
                <View style={styles.navbarContainer}>
                    <TouchableHighlight style={styles.navButton} onPress={this.handleMainDisplayPagePress}>
                        <Text style={styles.navButtonText}>Welcome</Text>
                    </TouchableHighlight>
                    
                    <TouchableHighlight style={styles.navButton} onPress={this.handleInstructionsDisplayPagePress}>
                        <Text style={styles.navButtonText}>Rules</Text>
                    </TouchableHighlight>
                    
                    <TouchableHighlight style={styles.navButton} onPress={this.handleEasyDisplayPagePress}>
                        <Text style={styles.navButtonText}>Easy Level</Text>
                    </TouchableHighlight>
                </View>
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'lightblue',
    },
    contentContainer: {
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
    },
    rowContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    cellText: {
        margin: 5,
        fontSize: 20,
        fontWeight: 'bold',
    },
    navbarContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 20,
    },
    navButton: {
        backgroundColor: 'white',
        borderColor: 'lightblue',
        borderWidth: 2,
        borderRadius: 5,
        paddingVertical: 10,
        paddingHorizontal: 20,
        marginHorizontal: 10,
    },
    navButtonText: {
        fontSize: 16,
        color: 'darkblue',
    },
});
