import React, { Component } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableHighlight, Dimensions, AppRegistry } from 'react-native';

let deviceHeight = Dimensions.get('window').height;
let deviceWidth = Dimensions.get('window').width;

export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            score: 0,
            homeDisplay: 'block',
            mainDisplay: 'none',
            instructionsDisplay: 'none',
            gameNum: 0,
            actualboard: [
                ["7", "9", "1", "8", "3", "2", "6", "4", "5"],
                ["5", "8", "3", "4", "7", "6", "1", "2", "9"],
                ["2", "4", "6", "1", "9", "5", "3", "8", "7"],
                ["6", "3", "4", "5", "2", "9", "7", "1", "8"],
                ["9", "1", "7", "3", "6", "8", "2", "5", "4"],
                ["8", "5", "2", "7", "1", "4", "9", "3", "6"],
                ["3", "7", "8", "9", "4", "1", "5", "6", "2"],
                ["4", "2", "9", "6", "5", "3", "8", "7", "1"],
                ["1", "6", "5", "2", "8", "7", "4", "9", "3"],
            ],
            board: [
                ["7", "9", "1", "", "", "2", "", "4", "5"],
                ["", "", "3", "4", "", "", "", "2", "9"],
                ["", "", "", "1", "9", "5", "", "8", ""],
                ["6", "3", "", "", "", "9", "", "1", "8"],
                ["", "", "7", "3", "", "", "2", "", ""],
                ["", "5", "", "", "1", "4", "", "3", ""],
                ["", "7", "", "", "", "", "5", "", "2"],
                ["4", "", "9", "", "5", "3", "8", "", ""],
                ["1", "", "", "2", "8", "", "4", "", ""],
            ],
            input: "",
            correct: 0,
            incorrect: 0,
            text: "",
        };
    }

    handleHomeDisplayPagePress = () => this.setState({
        homeDisplay: 'block',
        mainDisplay: 'none',
        instructionsDisplay: 'none',
    });

    handleMainDisplayPagePress = () => this.setState({
        homeDisplay: 'none',
        mainDisplay: 'block',
        instructionsDisplay: 'none',
    });

    handleInstructionsDisplayPagePress = () => this.setState({
        homeDisplay: 'none',
        mainDisplay: 'none',
        instructionsDisplay: 'block',
    });
    
    checkButton() {
        let incorrect = 0;
        for(let i = 0; i < 9; i++) {
            for(let j = 0; j < 9; j++) {
                if(this.state.actualboard[i][j] !== this.state.board[i][j]) {
                    incorrect = incorrect + 1;
                    this.state.board[i][j] = "X";
                }   
            }
        }
        let text = "";
        if(incorrect === 0) {
            text = "You won the game of Sudoku!";
        }
        else if(incorrect < 5) {
            text = "You're very close to winning. You currently have " + incorrect + " choices wrong.";
        }
        else {
            text = "You lose :( Try again. You currently have " + incorrect + " choices wrong.";
        }
        this.setState({ text: text, incorrect: incorrect });
    }
    
    
    renderBox(rowIndex, boxIndex) {
        const { board } = this.state;
        return (
          <TextInput
            key={rowIndex * 9 + boxIndex}
            style={styles.box}
            onChangeText={(input) => this.handleBoxChange(rowIndex, boxIndex, input)}
            value={board[rowIndex][boxIndex]}
            maxLength={1}
          />
    )}

    handleBoxChange(rowIndex, boxIndex, input) {
        if (/^[1-9]$/.test(input) || input === '') {
            const { board } = this.state;
            const newBoard = [...board];
            newBoard[rowIndex][boxIndex] = input;
            this.setState({ board: newBoard });
        }
    }

    reset = () => {
        this.setState({
            board: [
                    ["7", "9", "1", "", "", "2", "", "4", "5"],
                    ["", "", "3", "4", "", "", "", "2", "9"],
                    ["", "", "", "1", "9", "5", "", "8", ""],
                    ["6", "3", "", "", "", "9", "", "1", "8"],
                    ["", "", "7", "3", "", "", "2", "", ""],
                    ["", "5", "", "", "1", "4", "", "3", ""],
                    ["", "7", "", "", "", "", "5", "", "2"],
                    ["4", "", "9", "", "5", "3", "8", "", ""],
                    ["1", "", "", "2", "8", "", "4", "", ""],
                ],
            input: "",
        });
    }

    render() {
        const { input, board } = this.state;
        return (
            <View style={styles.container}>
                <View style={{ display: this.state.homeDisplay }}>
                    <View style={styles.contentHome}>
                        <TouchableHighlight style={styles.navButton} 
                            onPress={this.handleMainDisplayPagePress}>
                            <Text style={styles.navButtonText}>Main Board</Text>
                        </TouchableHighlight>
                        <TouchableHighlight style={styles.navButton} 
                            onPress={this.handleInstructionsDisplayPagePress}>
                            <Text style={styles.navButtonText}>Rules</Text>
                        </TouchableHighlight>
                    </View>
                </View>
                
                <View style={{ display: this.state.mainDisplay }}>
                    <View style={styles.contentMain}>
                        {board.map((row, rowIndex) => (
                            <View key={rowIndex} style={styles.row}>
                                {row.map((cell, boxIndex) => (
                                    this.renderBox(rowIndex, boxIndex)
                                ))}
                            </View>
                        ))}
                        <View style={styles.reset}>
                            <TouchableHighlight style={styles.resetBox} onPress={() => this.checkButton()}>
                                <Text style={styles.resetTxt}>Check Answer</Text>
                            </TouchableHighlight>
                        </View>
                        <View style={styles.reset}>
                            <TouchableHighlight style={styles.resetBox} onPress={() => this.reset()}>
                                <Text style={styles.resetTxt}>Reset Game</Text>
                            </TouchableHighlight>
                        </View>
                        <View style={styles.navButtonText}>
                            <Text>
                                {this.state.text}
                            </Text>
                        </View>
                    </View>
                </View>
                
                <View style={{ display: this.state.instructionsDisplay }}>
                    <View style={styles.contentRules}>
                        <Text style={styles.rulesTitle}> Sudoku Rules </Text>
                        <Text style={styles.rulesTxt}>  
                            Sudoku is played on a grid of 9 x 9 spaces. 
                            Within the rows and columns are 9 “squares” (made up of 3 x 3 spaces). 
                            Each row, column and square (9 spaces each) needs to be filled out with the numbers 1-9, 
                            without repeating any numbers within the row, column or square. 
                            Each Sudoku grid comes with a few spaces already filled in; the more spaces filled in, the easier the game!
                        </Text>
                        
                        <View style={styles.ruleButtons}>
                            <TouchableHighlight style={styles.navRuleButton} 
                                onPress={this.handleHomeDisplayPagePress}>
                                <Text style={styles.navButtonText}>Home</Text>
                            </TouchableHighlight>
                            <TouchableHighlight style={styles.navRuleButton} 
                                onPress={this.handleMainDisplayPagePress}>
                                <Text style={styles.navButtonText}>Play</Text>
                            </TouchableHighlight>
                        </View>
                    </View>
                </View>
                
                
            </View>
    );
}}


const styles = StyleSheet.create({
    container: {
        height: deviceHeight,
        width: deviceWidth,
    },

    //// HOME PAGE
    contentHome: {
        alignItems: "center",
        justifyContent: 'center',
        width: deviceWidth,
        height: deviceHeight,
        backgroundColor: "white",
        borderColor: "#647891",
        borderWidth: 20,
    },
    navButton: {
        height: deviceHeight / 10,
        width: deviceWidth / 2,
        backgroundColor: 'white',
        borderColor: 'black',
        borderWidth: 2,
        alignItems: 'center',
        justifyContent: 'center',
        borderWidth: 2,
        borderColor: 'grey',
        margin: 10,
    },
    
    //// MAIN BOARD PAGE
    contentMain: {
        height: deviceHeight, 
        width: deviceWidth,
        backgroundColor: "white",
        justifyContent: 'center',
        alignItems: 'center',
    },
    row: {
        justifyContent: "center",
        alignItems: "center", 
        flexDirection: "row",
    }, 
    box: {
        height: deviceWidth * 1 / 10,
        width: deviceWidth * 1 / 10,
        backgroundColor: "white",
        borderColor: "black",
        borderWidth: 3,
        margin: 0.5,
        justifyContent: "center",
        textAlign: "center",
    },
    reset: {
        alignItems: "center",
        justifyContent: "center",
        height: 25,
        width: 150, 
        margin: 20, 
        borderColor: "white",
        backgroundColor: "#c9deff",
        padding: 15,
        borderRadius: 20
    },
    playerText: {
        textAlign: "center",
    },
   
    resetBox: {
        height: 25, 
        width: 150,
        borderRadius: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    
    //// INSTRUCTIONS PAGE
    contentRules: {
        alignItems: "center",
        width: deviceWidth,
        height: deviceHeight,
        backgroundColor: "white",
        borderColor: "#c39df5",
        borderWidth: 20,
    },
    rulesTitle: {
        marginTop: 20,
        fontSize: 25,
        fontWeight: "bold",
    },
    rulesTxt: {
        margin: deviceWidth / 15,
        fontSize: deviceHeight / 35,
        lineHeight: deviceHeight / 23,
        textAlign: "justify",
    },
    ruleButtons: {
        flexDirection: "row",
    },
    navRuleButton: {
        height: deviceHeight / 20,
        width: deviceWidth / 5,
        backgroundColor: 'white',
        borderColor: 'black',
        borderWidth: 2,
        alignItems: 'center',
        justifyContent: 'center',
        borderWidth: 2,
        borderColor: 'grey',
        margin: 10, 
    }
});
