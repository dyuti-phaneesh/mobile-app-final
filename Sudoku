import React, { Component } from 'react';
import { View, AppRegistry, Text, StyleSheet, ImageBackground, TextInput, TouchableHighlight, Dimensions } from 'react-native';
import Constants from 'expo-constants';

let deviceHeight = Dimensions.get('window').height;
let deviceWidth = Dimensions.get('window').width;


export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            score: 0,
            homeDisplay: 'block',
            mainDisplay: 'none',
            instructionsDisplay: 'none',
            
            difficulty: 0,
            board: Array(9).fill(null).map(row => Array(9).fill("")),
            input: "",
            solvedBoard: Array(9).fill(null).map(row => Array(9).fill("")),
            deletedBoard: Array(9).fill(null).map(row => Array(9).fill("")),
            playerBoard: Array(9).fill(null).map(row => Array(9).fill("")),
        };
    }

    handleHomeDisplayPagePress = () => this.setState({
        homeDisplay: 'block',
        mainDisplay: 'none',
        instructionsDisplay: 'none',
    });

    handleMainDisplayPagePress = () => {
        this.setState({
            homeDisplay: 'none',
            mainDisplay: 'block',
            instructionsDisplay: 'none',
        },
        () => {
            this.createFilledBoard();
        }
    );};

    handleInstructionsDisplayPagePress = () => this.setState({
        homeDisplay: 'none',
        mainDisplay: 'none',
        instructionsDisplay: 'block',
    });
    
    renderBox(rowIndex, boxIndex) {
        const { board } = this.state;
        return (
          <TextInput
            style={styles.box}
            onChangeText={(input) => this.handleBoxChange(rowIndex, boxIndex, input)}
            value={board[rowIndex][boxIndex]}
            input type="number"
            maxLength={1}
          />
    )}

    handleBoxChange(rowIndex, boxIndex, input) {
        if (/^[1-9]$/.test(input) || input === '') {
            const { board } = this.state;
            const newBoard = [...board];
            newBoard[rowIndex][boxIndex] = input;
            this.setState({ board: newBoard });
        }
    }
    
    createFilledBoard = () => {
        let fBoard = Array(9).fill(null).map(row => Array(9).fill(0));

        const fillBoard = (row, col) => {
            if (row === 9) {
                return true;
            }
            if (col === 9) {
                return fillBoard(row + 1, 0);
            }
            let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            this.shuffleArray(numbers);
            for (let n of numbers) {
                if (this.isValid(fBoard, row, col, n)) {
                    fBoard[row][col] = n;
                    if (fillBoard(row, col + 1)) {
                        return true;
                    }
                    fBoard[row][col] = 0;
                }
            }
            return false;
        };

        fillBoard(0, 0);

        this.checkDifficulty(this.state.difficulty, fBoard);
        
        this.setState({ solvedBoard: fBoard, board: this.state.deletedBoard });

    };

    isValid = (board, row, col, n) => {
        for (let i = 0; i < 9; i++) {
            if (board[row][i] === n || board[i][col] === n) {
                return false;
            }
        }
    
        const startRow = Math.floor(row / 3) * 3;
        const startCol = Math.floor(col / 3) * 3;
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] === n) {
                    return false;
                }
            }
        }
        return true;
    };

    shuffleArray = (array) => {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    };
    
    checkDifficulty = (d, fBoard) => {
        if(d === 1) //EASY
        {
            this.adjustBoardDifficulty(fBoard, 15);
        }
        else if(d === 2) //MEDIUM
        {
            this.adjustBoardDifficulty(fBoard, 80);
        }
        else if(d === 3) //HARD
        {
            this.adjustBoardDifficulty(fBoard, 150);
        }
        
        //this.setState({deletedBoard: fBoard})
    }
    
    adjustBoardDifficulty = (boardT, n) => {
        let deletedCells = n;
        let newBoard = boardT.map(row => [...row]);
        while (deletedCells > 0) {
            let row = Math.floor(Math.random() * 9);
            let col = Math.floor(Math.random() * 9);
            if (newBoard[row][col] !== 0) {
                newBoard[row][col] = "";
                deletedCells--;
            }
        }
        this.setState({deletedBoard: newBoard});
    };

    clear = () => {
        this.setState({
            board: Array(9).fill(null).map(row => Array(9).fill("")),
            playerBoard: [],
            input: "",
        });
    }

    render() {
        const { input, board } = this.state;
        return (
            <View style={styles.container}>
            
                <View style={{ display: this.state.homeDisplay }}>
                    <View style={styles.contentHome}>
                        <TouchableHighlight style={styles.navButton} 
                            onPress={this.handleMainDisplayPagePress}>
                            <Text style={styles.navButtonText}>Main Board</Text>
                        </TouchableHighlight>
                        <TouchableHighlight style={styles.navButton} 
                            onPress={this.handleInstructionsDisplayPagePress}>
                            <Text style={styles.navButtonText}>Rules</Text>
                        </TouchableHighlight>
                    </View>
                </View>
                
                <View style={{ display: this.state.mainDisplay }}>
                    <View style={styles.contentMain}>
                        <View style={styles.diffView}>
                            <TouchableHighlight style={styles.diffButton} onPress={() => this.setState({ difficulty: 1 })}>
                                <Text style={styles.resetTxt}> Easy</Text>
                            </TouchableHighlight>
                            <TouchableHighlight style={styles.diffButton} onPress={() => this.setState({ difficulty: 2 })}>
                                <Text style={styles.resetTxt}> Medium</Text>
                            </TouchableHighlight>
                            <TouchableHighlight style={styles.diffButton} onPress={() => this.setState({ difficulty: 3 })}>
                                <Text style={styles.resetTxt}> Hard</Text>
                            </TouchableHighlight>
                        </View>
                        
                        {board.map((row, rowIndex) => (
                            <View key={rowIndex} style={styles.row}>
                                {row.map((cell, boxIndex) => (
                                    this.renderBox(rowIndex, boxIndex)
                                ))}
                            </View>
                        ))}
                        <View style={styles.reset}>
                            <TouchableHighlight style={styles.resetBox1} onPress={() => this.clear()}>
                                <Text style={styles.resetTxt}>Clear Game</Text>
                            </TouchableHighlight>
                            <TouchableHighlight style={styles.resetBox2} onPress={() => this.createFilledBoard()}>
                                <Text style={styles.resetTxt}>New Game</Text>
                            </TouchableHighlight>
                        </View>
                    </View>
                </View>
                
                <View style={{ display: this.state.instructionsDisplay }}>
                    <View style={styles.contentRules}>
                        <Text style={styles.rulesTitle}> Sudoku Rules </Text>
                        <Text style={styles.rulesTxt}> 
                            Sudoku is played on a grid of 9 x 9 spaces. 
                            Within the rows and columns are 9 “squares” (made up of 3 x 3 spaces). 
                            Each row, column and square (9 spaces each) needs to be filled out with the numbers 1-9, 
                            without repeating any numbers within the row, column or square. 
                            Each Sudoku grid comes with a few spaces already filled in; the more spaces filled in, the easier the game!
                        </Text>
                        
                        <View style={styles.ruleButtons}>
                            <TouchableHighlight style={styles.navRuleButton} 
                                onPress={this.handleHomeDisplayPagePress}>
                                <Text style={styles.navButtonText}>Home</Text>
                            </TouchableHighlight>
                            <TouchableHighlight style={styles.navRuleButton} 
                                onPress={this.handleMainDisplayPagePress}>
                                <Text style={styles.navButtonText}>Play</Text>
                            </TouchableHighlight>
                        </View>
                    </View>
                </View>
                
                
            </View>
    );
}}


const styles = StyleSheet.create({
    container: {
        height: deviceHeight,
        width: deviceWidth,
    },

    //// HOME PAGE
    contentHome: {
        alignItems: "center",
        justifyContent: 'center',
        width: deviceWidth,
        height: deviceHeight,
        backgroundColor: "white",
        borderColor: "#647891",
        borderWidth: 20,
    },
    navButton: {
        height: deviceHeight / 10,
        width: deviceWidth / 2,
        backgroundColor: 'white',
        borderColor: 'black',
        borderWidth: 2,
        alignItems: 'center',
        justifyContent: 'center',
        borderWidth: 2,
        borderColor: 'grey',
        margin: 10,
    },
    
    //// MAIN BOARD PAGE
    contentMain: {
        height: deviceHeight, 
        width: deviceWidth,
        backgroundColor: "white",
        justifyContent: 'center',
        alignItems: 'center',
    },
    diffView: {
      flexDirection: "row",
      alignItems: "center",
      margin: 5,
    },
    diffButton: {
      margin: 10,  
    },
    row: {
        justifyContent: "center",
        alignItems: "center", 
        flexDirection: "row",
    }, 
    box: {
        height: deviceWidth * 1 / 10,
        width: deviceWidth * 1 / 10,
        backgroundColor: "white",
        borderColor: "black",
        borderWidth: 3,
        margin: 0.5,
        justifyContent: "center",
        textAlign: "center",
    },
    reset: {
        alignItems: "center",
        justifyContent: "center",
        height: 25,
        width: 150, 
        margin: 20, 
        borderColor: "white",
        //backgroundColor: "#c9deff",
        padding: 15,
        borderRadius: 20,
        flexDirection: "row",
    },
    playerText: {
        textAlign: "center",
    },
   
    resetBox1: {
        height: 25, 
        width: 100,
        borderRadius: 20,
        justifyContent: "center",
        alignItems: "center",
        marginRight: 20,
    },
    resetBox2: {
        height: 25, 
        width: 100,
        borderRadius: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    
    //// INSTRUCTIONS PAGE
    contentRules: {
        alignItems: "center",
        width: deviceWidth,
        height: deviceHeight,
        backgroundColor: "white",
        borderColor: "#c39df5",
        borderWidth: 20,
    },
    rulesTitle: {
        marginTop: 20,
        fontSize: 25,
        fontWeight: "bold",
    },
    rulesTxt: {
        margin: deviceWidth / 15,
        fontSize: deviceHeight / 35,
        lineHeight: deviceHeight / 23,
        textAlign: "justify",
    },
    ruleButtons: {
        flexDirection: "row",
    },
    navRuleButton: {
        height: deviceHeight / 20,
        width: deviceWidth / 5,
        backgroundColor: 'white',
        borderColor: 'black',
        borderWidth: 2,
        alignItems: 'center',
        justifyContent: 'center',
        borderWidth: 2,
        borderColor: 'grey',
        margin: 10, 
    }
    
});
