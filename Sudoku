import React, { Component } from 'react';
import { View, AppRegistry, Text, StyleSheet, ImageBackground, TextInput, TouchableHighlight, Dimensions } from 'react-native';
import Constants from 'expo-constants';

let deviceHeight = Dimensions.get('window').height;
let deviceWidth = Dimensions.get('window').width;


export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            score: 0,
            homePage: 'block',
            mainDisplay: 'block',
            instructionsDisplay: 'none',
            board: [
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
            ],
            rowcheck: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
            columncheck: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
        };
    }

    reset = () => {
        this.setState({
            board: [
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
                ["", "", "", "", "", "", "", "", ""],
            ],
        });
    }

    handleEasyDisplayPagePress = () => this.setState({
        easyDisplay: 'block',
        mainDisplay: 'none',
        instructionsDisplay: 'none',
    });

    handleMainDisplayPagePress = () => this.setState({
        easyDisplay: 'none',
        mainDisplay: 'block',
        instructionsDisplay: 'none',
    });

    handleInstructionsDisplayPagePress = () => this.setState({
        easyDisplay: 'none',
        mainDisplay: 'none',
        instructionsDisplay: 'block',
    });

    randomBoardRender = () => {
        const newBoard = this.state.board.map(row => 
            row.map(() => Math.floor(Math.random() * 9 + 1))
        );
        this.setState({ board: newBoard });
    }

    rules = () => {
        let newBoard = [...this.state.board];
        let newRowCheck = [...this.state.rowcheck];
        let newColumnCheck = [...this.state.columncheck];

        for (let i = 0; i < 9; i++) {
            for (let j = 0; j < 9; j++) {
                for (let k = j + 1; k < 9; k++) {
                    let rowIndex = newRowCheck.findIndex(value => value === newBoard[i][j]);
                    newRowCheck[rowIndex] = 0;
                    if (newBoard[i][j] === newBoard[i][k]) {
                        newBoard[i][k] = newRowCheck.find(value => value !== 0);
                    }
                    let columnIndex = newColumnCheck.findIndex(value => value === newBoard[j][i]);
                    newColumnCheck[columnIndex] = 0;
                    if (newBoard[j][i] === newBoard[k][i]) {
                        newBoard[k][i] = newColumnCheck.find(value => value !== 0);
                    }
                }
            }
        }
        this.setState({ board: newBoard });
    };

    render() {
    return (
        <View style={styles.container}>
            <View style={styles.contentContainer}>
                {this.state.board.map((row, rowIndex) => (
                    <View key={rowIndex} style={styles.rowContainer}>
                        {row.map((cell, colIndex) => (
                            <Text key={colIndex} style={styles.cellText}>{cell}</Text>
                        ))}
                    </View>
                ))}
            </View>
            
            <View style={styles.navbarContainer}>
                <TouchableHighlight style={styles.navButton} onPress={this.handleMainDisplayPagePress}>
                    <Text style={styles.navButtonText}>Welcome</Text>
                </TouchableHighlight>
                
                <TouchableHighlight style={styles.navButton} onPress={this.handleInstructionsDisplayPagePress}>
                    <Text style={styles.navButtonText}>Rules</Text>
                </TouchableHighlight>
                
                <TouchableHighlight style={styles.navButton} onPress={this.handleEasyDisplayPagePress}>
                    <Text style={styles.navButtonText}>Easy Level</Text>
                </TouchableHighlight>
            </View>
        </View>
    );
}
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'lightblue',
    },
    contentContainer: {
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
    },
    rowContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    cellText: {
        margin: 5,
        fontSize: 20,
        fontWeight: 'bold',
    },
    navbarContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 20,
    },
    navButton: {
        backgroundColor: 'white',
        borderColor: 'lightblue',
        borderWidth: 2,
        borderRadius: 5,
        paddingVertical: 10,
        paddingHorizontal: 20,
        marginHorizontal: 10,
    },
    navButtonText: {
        fontSize: 16,
        color: 'darkblue',
    },
});
